# -*- coding: utf-8 -*-
"""sct_EDA_Task02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnLHHPZBMxrBfrRbhcj9dji4QmzTOgiy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')


plt.rcParams['figure.figsize'] = (12, 8)
sns.set_style("whitegrid")
sns.set_palette("husl")

# =============================================================================
# LOADING AND BASIC DATA EXPLORATION
# =============================================================================


df = pd.read_csv('amazon prime movies.csv')

print("="*80)
print("AMAZON PRIME MOVIES DATASET - EXPLORATORY DATA ANALYSIS")
print("="*80)

print(f"\n📊 Dataset Shape: {df.shape}")
print(f"📝 Total Movies: {len(df)}")
print(f"📋 Total Features: {len(df.columns)}")

print(f"\n🔍 Column Names:")
for i, col in enumerate(df.columns, 1):
    print(f"{i}. {col}")

print(f"\n📈 Dataset Info:")
print(df.info())

print(f"\n🎬 First 5 Movies:")
print(df.head())

print(f"\n🎭 Last 5 Movies:")
print(df.tail())

# =============================================================================
# MISSING VALUES ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("MISSING VALUES ANALYSIS")
print(f"{'='*80}")

missing_values = df.isnull().sum()
missing_percentage = (missing_values / len(df)) * 100

missing_df = pd.DataFrame({
    'Column': missing_values.index,
    'Missing_Count': missing_values.values,
    'Missing_Percentage': missing_percentage.values
}).sort_values('Missing_Count', ascending=False)

print(missing_df)


plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.barplot(data=missing_df, y='Column', x='Missing_Count', palette='viridis')
plt.title('Missing Values Count by Column')
plt.xlabel('Number of Missing Values')

plt.subplot(1, 2, 2)
sns.barplot(data=missing_df, y='Column', x='Missing_Percentage', palette='plasma')
plt.title('Missing Values Percentage by Column')
plt.xlabel('Percentage of Missing Values')
plt.tight_layout()
plt.show()

# =============================================================================
# LANGUAGE DISTRIBUTION ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("LANGUAGE DISTRIBUTION ANALYSIS")
print(f"{'='*80}")

language_counts = df['Language'].value_counts()
print(f"\n🌍 Languages Available: {df['Language'].nunique()}")
print(f"\n📊 Top 10 Languages:")
print(language_counts.head(10))


plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
language_counts.head(10).plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('Top 10 Languages - Bar Chart')
plt.xlabel('Language')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)

plt.subplot(2, 2, 2)
plt.pie(language_counts.head(8).values, labels=language_counts.head(8).index, autopct='%1.1f%%')
plt.title('Top 8 Languages Distribution')

plt.subplot(2, 2, 3)

if 'Year of Release' in df.columns:
    yearly_languages = df.groupby('Year of Release')['Language'].nunique()
    yearly_languages.plot(kind='line', marker='o', color='red')
    plt.title('Language Diversity Over Years')
    plt.xlabel('Year')
    plt.ylabel('Number of Different Languages')

plt.subplot(2, 2, 4)

df['Language_Category'] = df['Language'].apply(lambda x: 'Hindi' if x == 'Hindi'
                                               else 'English' if x == 'English'
                                               else 'Regional Indian' if x in ['Tamil', 'Telugu', 'Bengali', 'Malayalam', 'Kannada', 'Marathi', 'Gujarati', 'Punjabi']
                                               else 'Others')

lang_cat_counts = df['Language_Category'].value_counts()
lang_cat_counts.plot(kind='pie', autopct='%1.1f%%', colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])
plt.title('Language Categories Distribution')

plt.tight_layout()
plt.show()

# =============================================================================
# IMDB RATING ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("IMDB RATING ANALYSIS")
print(f"{'='*80}")


df['IMDb_Rating_Clean'] = pd.to_numeric(df['IMDb Rating'], errors='coerce')

rating_stats = df['IMDb_Rating_Clean'].describe()
print(f"\n⭐ IMDb Rating Statistics:")
print(rating_stats)

print(f"\n🎯 Rating Distribution:")
print(f"Excellent (8.0+): {len(df[df['IMDb_Rating_Clean'] >= 8.0])} movies")
print(f"Good (6.0-7.9): {len(df[(df['IMDb_Rating_Clean'] >= 6.0) & (df['IMDb_Rating_Clean'] < 8.0)])} movies")
print(f"Average (4.0-5.9): {len(df[(df['IMDb_Rating_Clean'] >= 4.0) & (df['IMDb_Rating_Clean'] < 6.0)])} movies")
print(f"Poor (<4.0): {len(df[df['IMDb_Rating_Clean'] < 4.0])} movies")


plt.figure(figsize=(15, 12))

plt.subplot(2, 3, 1)
plt.hist(df['IMDb_Rating_Clean'].dropna(), bins=30, alpha=0.7, color='gold', edgecolor='black')
plt.title('IMDb Rating Distribution')
plt.xlabel('IMDb Rating')
plt.ylabel('Frequency')

plt.subplot(2, 3, 2)
plt.boxplot(df['IMDb_Rating_Clean'].dropna())
plt.title('IMDb Rating Box Plot')
plt.ylabel('IMDb Rating')

plt.subplot(2, 3, 3)

top_languages = df['Language'].value_counts().head(5).index
language_ratings = [df[df['Language'] == lang]['IMDb_Rating_Clean'].dropna() for lang in top_languages]
plt.boxplot(language_ratings, labels=top_languages)
plt.title('Rating Distribution by Top 5 Languages')
plt.xlabel('Language')
plt.ylabel('IMDb Rating')
plt.xticks(rotation=45)

plt.subplot(2, 3, 4)

df['Rating_Category'] = pd.cut(df['IMDb_Rating_Clean'],
                               bins=[0, 4, 6, 8, 10],
                               labels=['Poor', 'Average', 'Good', 'Excellent'])
rating_cat_counts = df['Rating_Category'].value_counts()
rating_cat_counts.plot(kind='bar', color=['red', 'orange', 'lightgreen', 'green'])
plt.title('Movies by Rating Category')
plt.xlabel('Rating Category')
plt.ylabel('Number of Movies')

plt.subplot(2, 3, 5)

if 'Year of Release' in df.columns:
    df['Year_Clean'] = pd.to_numeric(df['Year of Release'], errors='coerce')
    yearly_avg_rating = df.groupby('Year_Clean')['IMDb_Rating_Clean'].mean()
    yearly_avg_rating.plot(kind='line', marker='o', color='purple')
    plt.title('Average IMDb Rating Over Years')
    plt.xlabel('Year')
    plt.ylabel('Average IMDb Rating')

plt.subplot(2, 3, 6)

if 'Maturity Rating' in df.columns:
    maturity_rating_dist = df.groupby('Maturity Rating')['IMDb_Rating_Clean'].mean().sort_values(ascending=False)
    maturity_rating_dist.plot(kind='bar', color='teal')
    plt.title('Average IMDb Rating by Maturity Rating')
    plt.xlabel('Maturity Rating')
    plt.ylabel('Average IMDb Rating')
    plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

# =============================================================================
# YEAR OF RELEASE ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("YEAR OF RELEASE ANALYSIS")
print(f"{'='*80}")

df['Year_Clean'] = pd.to_numeric(df['Year of Release'], errors='coerce')
year_counts = df['Year_Clean'].value_counts().sort_index()

print(f"\n📅 Year Range: {df['Year_Clean'].min():.0f} - {df['Year_Clean'].max():.0f}")
print(f"📈 Most Productive Year: {year_counts.idxmax():.0f} ({year_counts.max()} movies)")
print(f"📊 Average Movies per Year: {year_counts.mean():.1f}")

print(f"\n🎬 Movies by Decade:")
df['Decade'] = (df['Year_Clean'] // 10) * 10
decade_counts = df['Decade'].value_counts().sort_index()
for decade, count in decade_counts.items():
    if not pd.isna(decade):
        print(f"{int(decade)}s: {count} movies")


plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
year_counts.plot(kind='line', marker='o', color='blue')
plt.title('Movies Released by Year')
plt.xlabel('Year')
plt.ylabel('Number of Movies')

plt.subplot(2, 2, 2)
decade_counts.dropna().plot(kind='bar', color='orange')
plt.title('Movies by Decade')
plt.xlabel('Decade')
plt.ylabel('Number of Movies')

plt.subplot(2, 2, 3)

recent_years = year_counts[year_counts.index >= 2000]
recent_years.plot(kind='bar', color='green', alpha=0.7)
plt.title('Movies Released (2000 onwards)')
plt.xlabel('Year')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)

plt.subplot(2, 2, 4)

decade_language = df.groupby('Decade')['Language'].nunique()
decade_language.dropna().plot(kind='bar', color='purple')
plt.title('Language Diversity by Decade')
plt.xlabel('Decade')
plt.ylabel('Number of Languages')

plt.tight_layout()
plt.show()

# =============================================================================
# MATURITY RATING ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("MATURITY RATING ANALYSIS")
print(f"{'='*80}")

maturity_counts = df['Maturity Rating'].value_counts()
print(f"\n🔞 Maturity Ratings Available:")
print(maturity_counts)


plt.figure(figsize=(15, 8))

plt.subplot(2, 3, 1)
maturity_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Maturity Rating Distribution')

plt.subplot(2, 3, 2)
maturity_counts.plot(kind='bar', color='coral')
plt.title('Movies by Maturity Rating')
plt.xlabel('Maturity Rating')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)

plt.subplot(2, 3, 3)

maturity_language = pd.crosstab(df['Language'], df['Maturity Rating'])
maturity_language.head(8).plot(kind='bar', stacked=True)
plt.title('Maturity Rating by Language (Top 8)')
plt.xlabel('Language')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)

plt.subplot(2, 3, 4)

maturity_avg_rating = df.groupby('Maturity Rating')['IMDb_Rating_Clean'].mean().sort_values(ascending=False)
maturity_avg_rating.plot(kind='bar', color='lightblue')
plt.title('Average IMDb Rating by Maturity Rating')
plt.xlabel('Maturity Rating')
plt.ylabel('Average IMDb Rating')
plt.xticks(rotation=45)

plt.subplot(2, 3, 5)

if not df['Year_Clean'].isna().all():
    maturity_year = pd.crosstab(df['Year_Clean'], df['Maturity Rating'])
    maturity_year.plot(kind='area', alpha=0.7)
    plt.title('Maturity Rating Distribution Over Time')
    plt.xlabel('Year')
    plt.ylabel('Number of Movies')

plt.tight_layout()
plt.show()

# =============================================================================
# RUNNING TIME ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("RUNNING TIME ANALYSIS")
print(f"{'='*80}")

df['Runtime_Minutes'] = df['Running Time'].str.extract('(\d+)').astype(float)
runtime_stats = df['Runtime_Minutes'].describe()
print(f"\n⏰ Runtime Statistics (in minutes):")
print(runtime_stats)


df['Runtime_Category'] = pd.cut(df['Runtime_Minutes'],
                               bins=[0, 90, 120, 150, 300],
                               labels=['Short (<90 min)', 'Medium (90-120 min)', 'Long (120-150 min)', 'Very Long (>150 min)'])
runtime_cat_counts = df['Runtime_Category'].value_counts()
print(f"\n🎬 Movies by Runtime Category:")
print(runtime_cat_counts)

plt.figure(figsize=(15, 10))

plt.subplot(2, 3, 1)
plt.hist(df['Runtime_Minutes'].dropna(), bins=30, alpha=0.7, color='skyblue', edgecolor='black')
plt.title('Runtime Distribution')
plt.xlabel('Runtime (minutes)')
plt.ylabel('Frequency')

plt.subplot(2, 3, 2)
plt.boxplot(df['Runtime_Minutes'].dropna())
plt.title('Runtime Box Plot')
plt.ylabel('Runtime (minutes)')

plt.subplot(2, 3, 3)
runtime_cat_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Runtime Categories Distribution')

plt.subplot(2, 3, 4)

top_langs = df['Language'].value_counts().head(5).index
runtime_by_lang = [df[df['Language'] == lang]['Runtime_Minutes'].dropna() for lang in top_langs]
plt.boxplot(runtime_by_lang, labels=top_langs)
plt.title('Runtime Distribution by Top 5 Languages')
plt.xlabel('Language')
plt.ylabel('Runtime (minutes)')
plt.xticks(rotation=45)

plt.subplot(2, 3, 5)

valid_data = df.dropna(subset=['Runtime_Minutes', 'IMDb_Rating_Clean'])
plt.scatter(valid_data['Runtime_Minutes'], valid_data['IMDb_Rating_Clean'], alpha=0.6)
plt.title('Runtime vs IMDb Rating')
plt.xlabel('Runtime (minutes)')
plt.ylabel('IMDb Rating')

correlation = valid_data['Runtime_Minutes'].corr(valid_data['IMDb_Rating_Clean'])
plt.text(0.05, 0.95, f'Correlation: {correlation:.3f}', transform=plt.gca().transAxes,
         bbox=dict(boxstyle="round", facecolor='wheat', alpha=0.5))

plt.subplot(2, 3, 6)
yearly_runtime = df.groupby('Year_Clean')['Runtime_Minutes'].mean()
yearly_runtime.plot(kind='line', marker='o', color='red')
plt.title('Average Runtime Over Years')
plt.xlabel('Year')
plt.ylabel('Average Runtime (minutes)')

plt.tight_layout()
plt.show()

# =============================================================================
# CORRELATION ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("CORRELATION ANALYSIS")
print(f"{'='*80}")


numeric_cols = ['IMDb_Rating_Clean', 'Year_Clean', 'Runtime_Minutes']
correlation_data = df[numeric_cols].dropna()

if not correlation_data.empty:
    correlation_matrix = correlation_data.corr()
    print(f"\n📊 Correlation Matrix:")
    print(correlation_matrix)

    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
                square=True, fmt='.3f', cbar_kws={'label': 'Correlation Coefficient'})
    plt.title('Correlation Matrix - Numeric Variables')
    plt.tight_layout()
    plt.show()

# =============================================================================
# OUTLIER DETECTION
# =============================================================================

print(f"\n{'='*80}")
print("OUTLIER DETECTION")
print(f"{'='*80}")


for col in ['IMDb_Rating_Clean', 'Runtime_Minutes']:
    if col in df.columns:
        data = df[col].dropna()
        if len(data) > 0:
            Q1 = data.quantile(0.25)
            Q3 = data.quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR

            outliers = data[(data < lower_bound) | (data > upper_bound)]
            outlier_percentage = (len(outliers) / len(data)) * 100

            print(f"\n📈 {col}:")
            print(f"   Outliers: {len(outliers)} ({outlier_percentage:.2f}%)")
            print(f"   Lower bound: {lower_bound:.2f}")
            print(f"   Upper bound: {upper_bound:.2f}")
            if len(outliers) > 0:
                print(f"   Outlier values: {sorted(outliers.values)[:10]}...")  # Show first 10

# =============================================================================
# TOP MOVIES ANALYSIS
# =============================================================================

print(f"\n{'='*80}")
print("TOP MOVIES ANALYSIS")
print(f"{'='*80}")

# Highest rated movies
top_rated = df.nlargest(10, 'IMDb_Rating_Clean')[['Movie Name', 'Language', 'IMDb_Rating_Clean', 'Year of Release']]
print(f"\n🏆 Top 10 Highest Rated Movies:")
print(top_rated.to_string(index=False))

# Most recent highly rated movies
recent_movies = df[df['Year_Clean'] >= 2015]
if not recent_movies.empty:
    recent_top = recent_movies.nlargest(5, 'IMDb_Rating_Clean')[['Movie Name', 'Language', 'IMDb_Rating_Clean', 'Year of Release']]
    print(f"\n🆕 Top 5 Recent Movies (2015+):")
    print(recent_top.to_string(index=False))

# =============================================================================
# FINAL INSIGHTS AND SUMMARY
# =============================================================================

print(f"\n{'='*80}")
print("KEY INSIGHTS AND PATTERNS")
print(f"{'='*80}")

total_movies = len(df)
total_languages = df['Language'].nunique()
year_span = df['Year_Clean'].max() - df['Year_Clean'].min()
avg_rating = df['IMDb_Rating_Clean'].mean()

print(f"\n📋 DATASET SUMMARY:")
print(f"   • Total Movies: {total_movies}")
print(f"   • Languages Available: {total_languages}")
print(f"   • Year Span: {df['Year_Clean'].min():.0f} - {df['Year_Clean'].max():.0f} ({year_span:.0f} years)")
print(f"   • Average IMDb Rating: {avg_rating:.2f}")
print(f"   • Most Common Language: {df['Language'].mode()[0]} ({df['Language'].value_counts().iloc[0]} movies)")
print(f"   • Most Common Maturity Rating: {df['Maturity Rating'].mode()[0]}")

print(f"\n🔍 KEY PATTERNS:")
print(f"   • Language Diversity: Amazon Prime has content in {total_languages} different languages")
print(f"   • Content Concentration: Top 3 languages represent {(df['Language'].value_counts().head(3).sum()/total_movies)*100:.1f}% of content")
print(f"   • Quality Distribution: {len(df[df['IMDb_Rating_Clean'] >= 7])} movies ({(len(df[df['IMDb_Rating_Clean'] >= 7])/len(df.dropna(subset=['IMDb_Rating_Clean'])))*100:.1f}%) have ratings ≥ 7.0")
print(f"   • Content Evolution: {len(df[df['Year_Clean'] >= 2010])} movies ({(len(df[df['Year_Clean'] >= 2010])/len(df.dropna(subset=['Year_Clean'])))*100:.1f}%) are from 2010 onwards")

if 'Runtime_Minutes' in df.columns:
    avg_runtime = df['Runtime_Minutes'].mean()
    print(f"   • Average Runtime: {avg_runtime:.0f} minutes")

print(f"\n✅ Analysis Complete! The Amazon Prime Movies dataset shows a diverse collection")
print(f"    spanning multiple decades with strong representation of regional Indian cinema.")
